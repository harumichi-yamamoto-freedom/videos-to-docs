rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ログイン中かどうかを判定
    function isSignedIn() {
      return request.auth != null;
    }

    // 作成時チェック: ゲストの場合
    function isGuestCreate() {
      return !isSignedIn()
        && request.resource.data.ownerType == "guest"
        && request.resource.data.ownerId == "GUEST";
    }

    // 作成時チェック: ユーザーの場合
    function isUserCreate() {
      return isSignedIn()
        && request.resource.data.ownerType == "user"
        && request.resource.data.ownerId == request.auth.uid;
    }

    // 更新時: 所有フィールドが変更されていないことを保証
    function ownershipUnchanged() {
      return resource.data.ownerType == request.resource.data.ownerType
        && resource.data.ownerId == request.resource.data.ownerId;
    }

    // 読み取り/更新/削除判定（既存ドキュメントの所有に基づく）
    function canAccessExisting() {
      // 移行期間中: ownerType フィールドがない場合は一時的にゲスト扱い
      let ownerType = resource.data.keys().hasAll(['ownerType']) ? resource.data.ownerType : 'guest';
      let ownerId = resource.data.keys().hasAll(['ownerId']) ? resource.data.ownerId : 'GUEST';
      
      return (
        ownerType == "guest" // ゲスト共有: 誰でもOK
      ) || (
        isSignedIn() // ユーザー専有: ログインユーザーは自分のdocのみ
        && ownerType == "user"
        && ownerId == request.auth.uid
      );
    }

    // プロンプトコレクションのルール
    match /prompts/{promptId} {
      // 読み取り
      allow get, list: if canAccessExisting();

      // 作成
      allow create: if isGuestCreate() || isUserCreate();

      // 更新: デフォルトゲストプロンプトは編集不可
      allow update: if canAccessExisting() 
        && ownershipUnchanged()
        && !(resource.data.keys().hasAll(['ownerType', 'isDefault']) 
            && resource.data.ownerType == "guest" 
            && resource.data.isDefault == true);

      // 削除: デフォルトゲストプロンプトは削除不可
      allow delete: if canAccessExisting()
        && !(resource.data.keys().hasAll(['ownerType', 'isDefault'])
            && resource.data.ownerType == "guest" 
            && resource.data.isDefault == true);
    }

    // 生成文書コレクションのルール
    match /transcriptions/{docId} {
      // 読み取り
      allow get, list: if canAccessExisting();

      // 作成
      allow create: if isGuestCreate() || isUserCreate();

      // 更新
      allow update: if canAccessExisting() && ownershipUnchanged();

      // 削除
      allow delete: if canAccessExisting();
    }

    // users コレクション
    match /users/{userId} {
      // 自分のプロファイルは読み取り可能
      allow get: if request.auth != null && request.auth.uid == userId;
      
      // 管理者はすべてのユーザーを読み取り可能
      allow list: if request.auth != null 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superuser == true;
      
      // ユーザープロファイルの作成（自分のみ）
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // ユーザープロファイルの更新（自分のみ、superuserフィールドは変更不可）
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (!request.resource.data.keys().hasAll(['superuser']) || 
            resource.data.superuser == request.resource.data.superuser);
      
      // 削除: 自分のプロファイルのみ削除可能
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // adminSettings コレクション
    match /adminSettings/{doc} {
      // 読み取り: 全員可能（設定を参照するため）
      allow read: if true;
      
      // 書き込み: 管理者のみ可能
      allow write: if request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superuser == true;
    }

    // auditLogs コレクション
    match /auditLogs/{logId} {
      // 誰でも書き込み可能（システムログ記録用）
      allow create: if true;
      
      // 管理者のみ読み取り可能
      allow read: if request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.superuser == true;
    }
  }
}

